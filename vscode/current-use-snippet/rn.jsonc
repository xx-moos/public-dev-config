{
  "单className多个样式的缩写": {
    "prefix": "clsa",
    "body": ["className={`flex ${style[' ']}`}"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "es6 单className多个样式的缩写"
  },
  "classNames npm库的缩写": {
    "prefix": "cls",
    "body": [
      "className={classNames(' ', style[' '])}",
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "有classNames npm库的样式简写"
  },
  "使用antd的modal对应的组件jsx代码": {
    "prefix": "amx",
    "body": [
      "const EditModal = (props: any) => {",
      "  const { open, ok, cancel, title, row, type } = props;",
      "  const { message, modal, notification } = App.useApp();",
      "",
      "  const isNew = type == 'new';",
      "  const isEdit = type == 'edit';",
      "  const isRecovery = type == 'recovery';",
      "  const isView = type == 'view';",
      "",
      "  const [form] = Form.useForm();",
      "",
      "  const getList = () => {",
      "    if (open) {",
      "      if (row.id) {",
      "        // ?????",
      "        form.setFieldsValue({",
      "          ...row,",
      "        });",
      "      }",
      "    }",
      "  };",
      "",
      "  useEffect(() => {",
      "    getList();",
      "  }, [open]);",
      "",
      "  const clearForm = () => {",
      "",
      "  };",
      "",
      "  return (",
      "    <Modal",
      "      title={title}",
      "      okButtonProps={{",
      "        disabled: isView,",
      "      }}",
      "      open={open}",
      "      onOk={() => {",
      "        form.validateFields().then((values) => {",
      "",
      "          if (row.id) {",
      "            values.id = row.id;",
      "          }",
      "",
      "          console.log('values - >:', values);",
      "",
      "          setRoleEdit(values).then((res: any) => {",
      "            if (res.code != 200) {",
      "              message.error(res.message);",
      "              return;",
      "            }",
      "",
      "            message.success('操作成功');",
      "            clearForm();",
      "            ok();",
      "          });",
      "        });",
      "      }}",
      "      onCancel={() => {",
      "        clearForm();",
      "        cancel();",
      "      }}",
      "      width={'60%'}",
      "      style={{ top: 20 }}",
      "      destroyOnClose={true}",
      "      maskClosable={false}",
      "    >",
      "      <Form",
      "        form={form}",
      "        labelCol={{ span: 3 }}",
      "        wrapperCol={{ span: 20 }}",
      "        autoComplete=\"off\"",
      "        disabled={isView}",
      "        preserve={false}",
      "      >",
      "        <Form.Item",
      "          label=\"角色名称\"",
      "          name=\"role_name\"",
      "          rules={[{ required: true, message: '请填写' }]}",
      "        >",
      "          <Input",
      "            placeholder=\"角色名称\"",
      "            maxLength={30}",
      "            showCount",
      "          />",
      "        </Form.Item>",
      "",
      "        <Form.Item",
      "          label=\"权限到期时效\"",
      "          name=\"end_time\"",
      "        >",
      "          <DatePicker",
      "            showTime",
      "            disabledDate={(current) => {",
      "              return current && current < dayjs().add(-1, 'd');",
      "            }}",
      "            presets={[",
      "              {",
      "                label: '一周',",
      "                value: dayjs().add(7, 'd'),",
      "              },",
      "              {",
      "                label: '一月',",
      "                value: dayjs().add(1, 'month'),",
      "              },",
      "              {",
      "                label: '三个月',",
      "                value: dayjs().add(3, 'month'),",
      "              },",
      "              {",
      "                label: '半年',",
      "                value: dayjs().add(6, 'month'),",
      "              },",
      "              {",
      "                label: '一年',",
      "                value: dayjs().add(1, 'year'),",
      "              },",
      "            ]}",
      "          />",
      "        </Form.Item>",
      "      </Form>",
      "    </Modal>",
      "  );",
      "};"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "使用antd的modal对应的组件jsx代码"
  },
  "控制modal的对象": {
    "prefix": "acmo",
    "body": [
      "  const modalState = useReactive({",
      "    open: false,",
      "    title: '',",
      "    type: 'add',",
      "    row: {},",
      "    addShow: () => {",
      "      modalState.open = true;",
      "      modalState.title = '新增';",
      "      modalState.type = 'add';",
      "      modalState.row = {};",
      "    },",
      "    editShow: (data: any) => {",
      "      modalState.open = true;",
      "      modalState.title = '修改';",
      "      modalState.type = 'edit';",
      "      modalState.row = data;",
      "    },",
      "    viewShow: (data: any) => {",
      "      modalState.open = true;",
      "      modalState.title = '查看';",
      "      modalState.type = 'view';",
      "      modalState.row = data;",
      "    },",
      "    ok: () => {",
      "      modalState.open = false;",
      "      // mytable.current.reload();",
      "    },",
      "    cancel: () => {",
      "      modalState.open = false;",
      "    },",
      "  });"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "控制modal的对象"
  },
  "ahooks的useReactive": {
    "prefix": "ar",
    // prettier-ignore
    "body": [
      "const state: any = useReactive({", 
      "   ", 
      "  })"
    ],
    "description": "ahooks的useReactive",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactFunctionalComponent": {
    "prefix": "rfc",
    "body": [
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useMemo": {
    "prefix": "usm",
    "body": ["useMemo(() => ${1:first}, [${2:second}])"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useReducer": {
    "prefix": "usre",
    "body": ["const [state, dispatch] = useReducer(${1:first}, ${2:second}, ${3:third})"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useRef": {
    "prefix": "usr",
    "body": ["const ${1:first} = useRef(${2:second})"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useState": {
    "prefix": "uss",
    "body": ["const [${1:first}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:second})"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "hocComponent": {
    "prefix": "hoc",
    "body": [
      "import React from 'react'",
      "",
      "export default (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  return hocComponent",
      "}",
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  }
}
